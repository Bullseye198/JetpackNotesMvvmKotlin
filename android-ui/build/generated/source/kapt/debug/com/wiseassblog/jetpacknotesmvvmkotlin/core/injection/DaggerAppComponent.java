// Generated by Dagger (https://dagger.dev).
package com.wiseassblog.jetpacknotesmvvmkotlin.core.injection;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.domain.AppCoroutineDispatchers;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.wiseassblog.jetpacknotesmvvmkotlin.FirebaseUserRepoImpl;
import com.wiseassblog.jetpacknotesmvvmkotlin.FirebaseUserRepoImpl_Factory;
import com.wiseassblog.jetpacknotesmvvmkotlin.MyApplication;
import com.wiseassblog.jetpacknotesmvvmkotlin.NoteRepoImpl;
import com.wiseassblog.jetpacknotesmvvmkotlin.NoteRepoImpl_Factory;
import com.wiseassblog.jetpacknotesmvvmkotlin.core.injection.module.ApplicationModuleBinds_ContributeLoginActivity;
import com.wiseassblog.jetpacknotesmvvmkotlin.core.injection.module.ApplicationModuleBinds_ContributeNoteActivity;
import com.wiseassblog.jetpacknotesmvvmkotlin.core.injection.module.ApplicationModule_ProvideCoroutineDispatchersFactory;
import com.wiseassblog.jetpacknotesmvvmkotlin.core.injection.module.ApplicationModule_ProvideRoomNoteDatabaseFactory;
import com.wiseassblog.jetpacknotesmvvmkotlin.core.injection.module.DaoModule_ProvideNoteDaoFactory;
import com.wiseassblog.jetpacknotesmvvmkotlin.core.injection.module.ui.LoginUIModule_ContributeLoginFragment;
import com.wiseassblog.jetpacknotesmvvmkotlin.dependencyInjection.NoteUIModule_ContributesNoteDetailView;
import com.wiseassblog.jetpacknotesmvvmkotlin.dependencyInjection.NoteUIModule_ContributesNoteListFragment;
import com.wiseassblog.jetpacknotesmvvmkotlin.dependencyInjection.ViewModelFactory;
import com.wiseassblog.jetpacknotesmvvmkotlin.dependencyInjection.ViewModelFactory_Factory;
import com.wiseassblog.jetpacknotesmvvmkotlin.features.main.MainActivity;
import com.wiseassblog.jetpacknotesmvvmkotlin.features.main.MainActivity_MembersInjector;
import com.wiseassblog.jetpacknotesmvvmkotlin.login.LoginActivity;
import com.wiseassblog.jetpacknotesmvvmkotlin.login.LoginFragment;
import com.wiseassblog.jetpacknotesmvvmkotlin.login.LoginFragment_MembersInjector;
import com.wiseassblog.jetpacknotesmvvmkotlin.login.UserViewModel;
import com.wiseassblog.jetpacknotesmvvmkotlin.login.UserViewModel_Factory;
import com.wiseassblog.jetpacknotesmvvmkotlin.model.NoteDao;
import com.wiseassblog.jetpacknotesmvvmkotlin.model.RoomNoteDatabase;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.NoteListViewModel;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.NoteListViewModel_Factory;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.NoteViewModel;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.NoteViewModel_Factory;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.notedetail.NoteDetailView;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.notedetail.NoteDetailView_MembersInjector;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.notelist.NoteListFragment;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.notelist.NoteListFragment_MembersInjector;
import com.wiseassblog.jetpacknotesmvvmkotlin.userInterface.MainActivityViewModel;
import com.wiseassblog.jetpacknotesmvvmkotlin.userInterface.MainActivityViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ApplicationModuleBinds_ContributeNoteActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ApplicationModuleBinds_ContributeLoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent.Factory> noteListFragmentSubcomponentFactoryProvider;

  private Provider<NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent.Factory> noteDetailViewSubcomponentFactoryProvider;

  private Provider<Context> applicationContextProvider;

  private Provider<RoomNoteDatabase> provideRoomNoteDatabaseProvider;

  private Provider<NoteDao> provideNoteDaoProvider;

  private Provider<NoteRepoImpl> noteRepoImplProvider;

  private Provider<AppCoroutineDispatchers> provideCoroutineDispatchersProvider;

  private Provider<NoteViewModel> noteViewModelProvider;

  private Provider<NoteListViewModel> noteListViewModelProvider;

  private Provider<FirebaseUserRepoImpl> firebaseUserRepoImplProvider;

  private Provider<UserViewModel> userViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Context applicationContextParam) {

    initialize(applicationContextParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider, LoginActivity.class, (Provider) loginActivitySubcomponentFactoryProvider, NoteListFragment.class, (Provider) noteListFragmentSubcomponentFactoryProvider, NoteDetailView.class, (Provider) noteDetailViewSubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  @SuppressWarnings("unchecked")
  private void initialize(final Context applicationContextParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ApplicationModuleBinds_ContributeNoteActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ApplicationModuleBinds_ContributeNoteActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.loginActivitySubcomponentFactoryProvider = new Provider<ApplicationModuleBinds_ContributeLoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public ApplicationModuleBinds_ContributeLoginActivity.LoginActivitySubcomponent.Factory get(
          ) {
        return new LoginActivitySubcomponentFactory();}
    };
    this.noteListFragmentSubcomponentFactoryProvider = new Provider<NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent.Factory>() {
      @Override
      public NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent.Factory get() {
        return new NoteListFragmentSubcomponentFactory();}
    };
    this.noteDetailViewSubcomponentFactoryProvider = new Provider<NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent.Factory>() {
      @Override
      public NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent.Factory get() {
        return new NoteDetailViewSubcomponentFactory();}
    };
    this.applicationContextProvider = InstanceFactory.create(applicationContextParam);
    this.provideRoomNoteDatabaseProvider = DoubleCheck.provider(ApplicationModule_ProvideRoomNoteDatabaseFactory.create(applicationContextProvider));
    this.provideNoteDaoProvider = DaoModule_ProvideNoteDaoFactory.create(provideRoomNoteDatabaseProvider);
    this.noteRepoImplProvider = DoubleCheck.provider(NoteRepoImpl_Factory.create(provideNoteDaoProvider));
    this.provideCoroutineDispatchersProvider = DoubleCheck.provider(ApplicationModule_ProvideCoroutineDispatchersFactory.create());
    this.noteViewModelProvider = NoteViewModel_Factory.create((Provider) noteRepoImplProvider, provideCoroutineDispatchersProvider);
    this.noteListViewModelProvider = NoteListViewModel_Factory.create((Provider) noteRepoImplProvider, provideCoroutineDispatchersProvider);
    this.firebaseUserRepoImplProvider = DoubleCheck.provider(FirebaseUserRepoImpl_Factory.create());
    this.userViewModelProvider = UserViewModel_Factory.create((Provider) firebaseUserRepoImplProvider, provideCoroutineDispatchersProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4).put(MainActivityViewModel.class, (Provider) MainActivityViewModel_Factory.create()).put(NoteViewModel.class, (Provider) noteViewModelProvider).put(NoteListViewModel.class, (Provider) noteListViewModelProvider).put(UserViewModel.class, (Provider) userViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MyApplication arg0) {
    injectMyApplication(arg0);}

  @CanIgnoreReturnValue
  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context applicationContext) {
      Preconditions.checkNotNull(applicationContext);
      return new DaggerAppComponent(applicationContext);
    }
  }

  private final class MainActivitySubcomponentFactory implements ApplicationModuleBinds_ContributeNoteActivity.MainActivitySubcomponent.Factory {
    @Override
    public ApplicationModuleBinds_ContributeNoteActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ApplicationModuleBinds_ContributeNoteActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider, LoginActivity.class, (Provider) DaggerAppComponent.this.loginActivitySubcomponentFactoryProvider, NoteListFragment.class, (Provider) DaggerAppComponent.this.noteListFragmentSubcomponentFactoryProvider, NoteDetailView.class, (Provider) DaggerAppComponent.this.noteDetailViewSubcomponentFactoryProvider);}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }

    private final class NoteListFragmentSubcomponentFactory implements NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent.Factory {
      @Override
      public NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent create(
          NoteListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NoteListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NoteListFragmentSubcomponentImpl implements NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent {
      private NoteListFragmentSubcomponentImpl(NoteListFragment arg0) {

      }

      @Override
      public void inject(NoteListFragment arg0) {
        injectNoteListFragment(arg0);}

      @CanIgnoreReturnValue
      private NoteListFragment injectNoteListFragment(NoteListFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        NoteListFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class NoteDetailViewSubcomponentFactory implements NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent.Factory {
      @Override
      public NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent create(
          NoteDetailView arg0) {
        Preconditions.checkNotNull(arg0);
        return new NoteDetailViewSubcomponentImpl(arg0);
      }
    }

    private final class NoteDetailViewSubcomponentImpl implements NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent {
      private NoteDetailViewSubcomponentImpl(NoteDetailView arg0) {

      }

      @Override
      public void inject(NoteDetailView arg0) {
        injectNoteDetailView(arg0);}

      @CanIgnoreReturnValue
      private NoteDetailView injectNoteDetailView(NoteDetailView instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        NoteDetailView_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class LoginActivitySubcomponentFactory implements ApplicationModuleBinds_ContributeLoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public ApplicationModuleBinds_ContributeLoginActivity.LoginActivitySubcomponent create(
        LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl implements ApplicationModuleBinds_ContributeLoginActivity.LoginActivitySubcomponent {
    private Provider<LoginUIModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory> loginFragmentSubcomponentFactoryProvider;

    private LoginActivitySubcomponentImpl(LoginActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider, LoginActivity.class, (Provider) DaggerAppComponent.this.loginActivitySubcomponentFactoryProvider, NoteListFragment.class, (Provider) DaggerAppComponent.this.noteListFragmentSubcomponentFactoryProvider, NoteDetailView.class, (Provider) DaggerAppComponent.this.noteDetailViewSubcomponentFactoryProvider, LoginFragment.class, (Provider) loginFragmentSubcomponentFactoryProvider);}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    @SuppressWarnings("unchecked")
    private void initialize(final LoginActivity arg0) {
      this.loginFragmentSubcomponentFactoryProvider = new Provider<LoginUIModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory>() {
        @Override
        public LoginUIModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory get() {
          return new LoginFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);}

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class LoginFragmentSubcomponentFactory implements LoginUIModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory {
      @Override
      public LoginUIModule_ContributeLoginFragment.LoginFragmentSubcomponent create(
          LoginFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LoginFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LoginFragmentSubcomponentImpl implements LoginUIModule_ContributeLoginFragment.LoginFragmentSubcomponent {
      private LoginFragmentSubcomponentImpl(LoginFragment arg0) {

      }

      @Override
      public void inject(LoginFragment arg0) {
        injectLoginFragment(arg0);}

      @CanIgnoreReturnValue
      private LoginFragment injectLoginFragment(LoginFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, LoginActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        LoginFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class NoteListFragmentSubcomponentFactory implements NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent.Factory {
    @Override
    public NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent create(
        NoteListFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new NoteListFragmentSubcomponentImpl(arg0);
    }
  }

  private final class NoteListFragmentSubcomponentImpl implements NoteUIModule_ContributesNoteListFragment.NoteListFragmentSubcomponent {
    private NoteListFragmentSubcomponentImpl(NoteListFragment arg0) {

    }

    @Override
    public void inject(NoteListFragment arg0) {
      injectNoteListFragment(arg0);}

    @CanIgnoreReturnValue
    private NoteListFragment injectNoteListFragment(NoteListFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      NoteListFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class NoteDetailViewSubcomponentFactory implements NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent.Factory {
    @Override
    public NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent create(
        NoteDetailView arg0) {
      Preconditions.checkNotNull(arg0);
      return new NoteDetailViewSubcomponentImpl(arg0);
    }
  }

  private final class NoteDetailViewSubcomponentImpl implements NoteUIModule_ContributesNoteDetailView.NoteDetailViewSubcomponent {
    private NoteDetailViewSubcomponentImpl(NoteDetailView arg0) {

    }

    @Override
    public void inject(NoteDetailView arg0) {
      injectNoteDetailView(arg0);}

    @CanIgnoreReturnValue
    private NoteDetailView injectNoteDetailView(NoteDetailView instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      NoteDetailView_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
