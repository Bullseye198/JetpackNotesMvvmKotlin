// Generated by Dagger (https://dagger.dev).
package com.wiseassblog.jetpacknotesmvvmkotlin.dependencyInjection;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.wiseassblog.jetpacknotesmvvmkotlin.MyApplication;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.NoteActivity;
import com.wiseassblog.jetpacknotesmvvmkotlin.note.NoteActivity_MembersInjector;
import com.wiseassblog.jetpacknotesmvvmkotlin.userInterface.MainActivityViewModel;
import com.wiseassblog.jetpacknotesmvvmkotlin.userInterface.MainActivityViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ApplicationModule_ContributeNoteActivity.NoteActivitySubcomponent.Factory> noteActivitySubcomponentFactoryProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Context applicationContext) {

    initialize(applicationContext);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(NoteActivity.class, (Provider) noteActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  @SuppressWarnings("unchecked")
  private void initialize(final Context applicationContext) {
    this.noteActivitySubcomponentFactoryProvider = new Provider<ApplicationModule_ContributeNoteActivity.NoteActivitySubcomponent.Factory>() {
      @Override
      public ApplicationModule_ContributeNoteActivity.NoteActivitySubcomponent.Factory get() {
        return new NoteActivitySubcomponentFactory();}
    };
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(MainActivityViewModel.class, (Provider) MainActivityViewModel_Factory.create()).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MyApplication arg0) {
    injectMyApplication(arg0);}

  @CanIgnoreReturnValue
  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context applicationContext) {
      Preconditions.checkNotNull(applicationContext);
      return new DaggerAppComponent(applicationContext);
    }
  }

  private final class NoteActivitySubcomponentFactory implements ApplicationModule_ContributeNoteActivity.NoteActivitySubcomponent.Factory {
    @Override
    public ApplicationModule_ContributeNoteActivity.NoteActivitySubcomponent create(
        NoteActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new NoteActivitySubcomponentImpl(arg0);
    }
  }

  private final class NoteActivitySubcomponentImpl implements ApplicationModule_ContributeNoteActivity.NoteActivitySubcomponent {
    private NoteActivitySubcomponentImpl(NoteActivity arg0) {

    }

    @Override
    public void inject(NoteActivity arg0) {
      injectNoteActivity(arg0);}

    @CanIgnoreReturnValue
    private NoteActivity injectNoteActivity(NoteActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      NoteActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
